%checkerboard {
	background: var(--checker) repeat;
	image-rendering: pixelated;
}
%font {
	font-family: 'Segoe UI', sans-serif;
	font-size: 12px;
}
%inset-shallow {
	border-style: solid;
	border-width: 1px;
	border-color: var(--ButtonShadow) var(--ButtonHilight) var(--ButtonHilight) var(--ButtonShadow);
}
%outset-shallow {
	border-style: solid;
	border-width: 1px;
	border-color: var(--ButtonHilight) var(--ButtonShadow) var(--ButtonShadow) var(--ButtonHilight);
}
%inset-deep {
	@extend %inset-shallow; /* as fallback */
	position: relative; /* for pseudo element(s) */
}
%outset-deep {
	@extend %outset-shallow; /* as fallback */
	position: relative; /* for pseudo element(s) */
}
/* @supports selector(a::after) { ... } doesn't work */
@supports (--supports: supports) {
	%inset-deep,
	%outset-deep {
		border: none;
	}
	%outset-deep {
		border-color: var(--ButtonLight) var(--ButtonShadow) var(--ButtonShadow) var(--ButtonLight);
		border-style: solid;
		border-width: 2px 2px;
	}
	%inset-deep {
		border-color: var(--ButtonShadow);
		border-style: solid;
		border-width: 2px 2px;
	}
	%outset-deep::after {
		content: "";
		display: block;
		position: absolute;
		pointer-events: none;
		left: -2px;
		top: -2px;
		right: -2px;
		bottom: -2px;
		border-color: var(--ButtonHilight) var(--ButtonDkShadow) var(--ButtonDkShadow) var(--ButtonHilight);
		border-style: solid;
		border-width: 1px 1px;
	}
	%inset-deep::after {
		@extend %outset-deep::after;
		border-color: var(--ButtonDkShadow);
		border-style: solid;
		border-width: 1px 1px;
	}
}
button {
	background: var(--ButtonFace);
	color: var(--ButtonText);
}
button:not(.lightweight) {
	outline: none; /* replaced with inner dotted focus ring (which is admittedly not so prominent...) */
	@extend %outset-deep;
}
button:not(.lightweight):hover:active {
	@extend %inset-deep;
}

/* TODO: offset content on press! */
/* (this would need a child ELEMENT, wouldn't work with text nodes as direct descendants:) */
/*button:active > * {
	position: relative;
	left: 1px;
	top: 1px;
}
*/
/* also, this is more complicated; see Paint; the tool buttons translate when being pushed and when depressed, and these add together */

button:not(.lightweight):focus::before {
	content: "";
	display: block;
	position: absolute;
	left: 2px;
	top: 2px;
	right: 2px;
	bottom: 2px;
	border: 1px dotted var(--ButtonDkShadow); /* ?? */
	/* TODO: get exact inset dimensions, and have corners without dots ideally */
	/* (could use outline instead of ::before at this point) */
}
button.lightweight {
	outline: none; /* these buttons are not usually keyboard accessible, or the focus it shown just by inset (menu buttons) */

	border-style: solid;
	border-width: 1px;
	border-color: transparent;
}
/* TODO: recommend preventing focus on click for lightweight buttons */
button.lightweight:hover /*,
button.lightweight:focus */ {
	@extend %outset-shallow;
}
button.lightweight:hover:active {
	@extend %inset-shallow;
}
button[disabled] {
	color: var(--GrayText);
	text-shadow: 1px 1px 0px white; /* TODO: what var for color? */
}
/* TODO: [checked]? .pressed? .depressed? .down? .held? what should it be called? */
button:not(.lightweight).selected {
	@extend %inset-deep;
	@extend %checkerboard;
}

.window-titlebar {
	display: flex;
	flex-direction: row;
	align-items: center;

	background: var(--ActiveTitle);
	background: linear-gradient(to right, var(--ActiveTitle) 0%, var(--GradientActiveTitle) 100%);
	
	color: var(--TitleText);
	@extend %font;
	font-weight: bold;
}
.window:not(.focused) .window-titlebar {
	background: darkgray;
	background: linear-gradient(to right, var(--InactiveTitle) 0%, var(--GradientInactiveTitle) 100%);

	color: var(--InactiveTitleText);
}
.window {
	background: var(--Window);
	/*color: var(--WindowText);*/
	/*border: 1px solid var(--WindowFrame);*/
	background: var(--ButtonFace); /* should this be part of %outset-deep? probably! */
	/* TODO: use window-specific theme colors; also different types of windows */
	/* padding: 2px; */
}
.window:not(.maximized) {
	@extend %outset-deep;
}
.window > * {
	/* margin: 1px; */
}
.window-button {
	margin: 2px 0;
}
.window-close-button {
	margin-left: 2px;
	margin-right: 2px;
}
.window-title-area {
	position: relative;
	flex: 1;
	height: 16px; /* 100% doesn't work */
}
.window-title {
	position: absolute;
	left: 0;
	top: 0;
	right: 0;
	bottom: 0;
	display: inline-block !important;
	margin: 0;
	padding: 0;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	padding-left: 2px;
}
.window-close-button {
	/* display: block !important; */
	/* float: right; */
	/* width: 13px;
	height: 11px; */
}
.window-close-button,
.window-maximize-button,
.window-minimize-button {
	background-image: url("images/titlebar-buttons.png");
	image-rendering: pixelated;
	display: block;
	width: 16px;
	height: 14px;
	padding: 0;
}

.window-close-button {
	background-position: calc(-3 * 13px - 1px) 0px;
}
.window-maximize-button {
	background-position: calc(-1 * 13px - 1px) 0px;
}
.maximized .window-maximize-button {
	background-position: calc(-2 * 13px - 1px) 0px;
}
.window-minimize-button {
	background-position: calc(-0 * 13px - 1px) 0px;
}

.window-close-button:hover:active {
	background-position: calc(-3 * 13px - 0px) 1px;
}
.window-maximize-button:hover:active {
	background-position: calc(-1 * 13px - 0px) 1px;
}
.maximized .window-maximize-button:hover:active {
	background-position: calc(-2 * 13px - 0px) 1px;
}
.window-minimize-button:hover:active {
	background-position: calc(-0 * 13px - 0px) 1px;
}


.menus {
	background: var(--Menu);
}
.menus *,
.menu-popup * {
	@extend %font;
}
.menu-container {
	margin-bottom: 1px;
}
.menu-button {
	padding: 2px 5px;
	position: relative;
	outline: 0;
	/* @extend button.lightweight; */
	background: var(--Menu);
}
.menu-button:hover {
	box-shadow: 1px 1px 0 var(--ButtonHilight) inset, -1px -1px 0 var(--ButtonShadow) inset;
}
.menu-button:active,
.menu-button.active {
	box-shadow: 1px 1px 0 var(--ButtonShadow) inset, -1px -1px 0 white inset;
	top: 1px;
	left: 1px;
}
.menu-popup {
	display: block;
	padding: 2px;
	/* @extend %outset-deep; */
	background: var(--Menu);
	color: var(--MenuText);
	border-top: 1px solid var(--ButtonFace);
	border-left: 1px solid var(--ButtonFace);
	border-right: 1px solid var(--ButtonDkShadow);
	border-bottom: 1px solid var(--ButtonDkShadow);
	box-shadow: 1px 1px 0 white inset, -1px -1px 0 var(--ButtonShadow) inset;
}
.menu-item {
	padding: 1px 3px;
	margin: 2px;
}
.menu-item[disabled] {
	color: var(--GrayText);
	text-shadow: 0.8px 0.8px 0px #fff;
}
.menu-item:focus,
.menu-item.active {
	background: var(--Hilight);
	color: var(--HilightText);
	text-shadow: none;
	outline: 0;
}
.menu-item .menu-item-shortcut {
	padding-left: 10px;
}
.menu-hr {
	border: 0;
	border-top: 1px solid #808080;
	border-bottom: 1px solid #ffffff;
	margin: 0px 2px;
}
.menu-hotkey {
	text-decoration: underline;
}


/* TODO: better API! better names */
.button-like-border {
	@extend %outset-deep;
}


::selection {
	background-color: var(--Hilight);
	color: var(--HilightText);
}

::-webkit-scrollbar,
::-webkit-scrollbar-thumb,
::-webkit-scrollbar-button {
	width: 16px;
	height: 16px;
}
::-webkit-scrollbar-thumb,
::-webkit-scrollbar-button {
	background: var(--ButtonFace);
	border-top: 1px solid var(--ButtonFace);
	border-left: 1px solid var(--ButtonFace);
	border-right: 1px solid var(--ButtonDkShadow);
	border-bottom: 1px solid var(--ButtonDkShadow);
	box-shadow: 1px 1px 0 var(--ButtonHilight) inset, -1px -1px 0 var(--ButtonShadow) inset;
}
::-webkit-scrollbar-button:hover:active {
	border: 1px solid var(--ButtonShadow);
	box-shadow: none;
}
::-webkit-scrollbar-corner {
	background: var(--ButtonFace);
}
::-webkit-scrollbar-button {
	background-position: center;
	background-repeat: no-repeat;
}
::-webkit-scrollbar-button {
	background-image: url("images/arrows.png");
	image-rendering: pixelated;
}
::-webkit-scrollbar-button:horizontal:decrement:disabled {
	background-position: calc(-24px + 1px) 1px; /* left */
}
::-webkit-scrollbar-button:horizontal:increment:disabled {
	background-position: calc(-36px + 1px) 1px; /* right */
}
::-webkit-scrollbar-button:vertical:decrement:disabled {
	background-position: calc(-12px + 1px) 1px; /* up */
}
::-webkit-scrollbar-button:vertical:increment:disabled {
	background-position: calc(-0px + 1px) 1px; /* down */
}
::-webkit-scrollbar-button:horizontal:decrement {
	background-position: calc(-24px + 1px) calc(-12px + 1px); /* left */
}
::-webkit-scrollbar-button:horizontal:increment {
	background-position: calc(-36px + 1px) calc(-12px + 1px); /* right */
}
::-webkit-scrollbar-button:vertical:decrement {
	background-position: calc(-12px + 1px) calc(-12px + 1px); /* up */
}
::-webkit-scrollbar-button:vertical:increment {
	background-position: calc(-0px + 1px) calc(-12px + 1px); /* down */
}
::-webkit-scrollbar {
	@extend %checkerboard;
}
::-webkit-scrollbar-track-piece:hover:active {
	@extend %checkerboard;
	background-color: white;
	background-blend-mode: difference;
	/* background-attachment: fixed; breaks the checkered background in chrome */
}
::-webkit-scrollbar-track-piece:increment {
	background-position: bottom;
}

/* turn off double buttons */
::-webkit-scrollbar-button:start:increment,
::-webkit-scrollbar-button:end:decrement {
	display: none;
}
